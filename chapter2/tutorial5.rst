Python スクリプトの階層構造
============================

Python はオブジェクト指向の言語であり、いくつかの階層構造がある。
例えば、numpy などのライブラリは、「パッケージ」と呼ばれる大きなコード群して提供される。
各パッケージには、「モジュール」と呼ばれる小さなコード郡が複数含まれることが多い。
例えば、numpy の線形代数モジュールは ``linalg`` という名前で提供される。

さらに、各モジュールには「クラス」が定義されていることがあり、
その中に変数や関数（クラスに付属する関数はメソッドと呼ばれる）が含まれる。

クラスは、オブジェクト指向プログラミングに必要な重要な概念であるが、
発展的な内容を含むため、ここでは深くは紹介しない。
ただし多くのライブラリでは用いられることが多いため、その使用法を簡単に紹介する。


パッケージ内・モジュール内へのアクセス
----------------------------------------------------------

これまでnumpyのsin関数を実行する際、``np.sin()`` を実行した。
これは、numpy パッケージ内に定義されている sin 関数を呼び出すための記法である。
ここで「.」は、1つ下の階層への移動を意味するもので、この例の場合
「パッケージ名.関数名」
という形式でアクセスしていることになる。

同様に、numpy パッケージ内の fft モジュール内の 実数に対する高速フーリエ変換
rfft を実行するためには ``np.fft.rfft`` というように
「パッケージ名.モジュール名.関数名」
と言う形式でアクセスできる。


クラスの使い方 np.ndarray
-------------------------------

クラスはオブジェクト指向の重要な概念であるが、
その定義を説明する前に、ここではまずその一例である ``np.ndarray`` を再度紹介する。

.. ipython:: python

  x = np.linspace(0,1,12)
  x

ここで、xは12個の要素からなる1次元ベクトルである。

言葉の定義を少し明確にしておく。
「クラス」は型名のことであり、x のクラスは ``np.ndarray`` である。
一方、x は ``np.ndarray`` 型を持つ変数である。
オブジェクト指向の言語ではこの変数のことを「オブジェクト」や「インスタンス」と呼ぶことが多い。

各オブジェクトは、内部に変数や関数などの別のオブジェクトを有していることが多い。
例えば ``np.ndarray`` のオブジェクトは、
アレイの大きさや次元数などをオブジェクトとして有している。

.. ipython:: python

  x.shape  # x の形状
  x.ndim  # x の次元数

このように、オブジェクト内部のオブジェクトには
「オブジェクト名.オブジェクト名」
というように「.」を使うことでアクセスできる。

メソッドはそれ自身の値を操作する関数である。
例えば、12要素を持つ1次元ベクトルを 3x4 要素を持つ2次元行列に並び替えるには、``reshape``
メソッドを実行すれば良い。
メソッドにも「.」を用いてアクセスできる。

.. ipython:: python

  y = x.reshape(4,3)
  y.shape
  y

この ``reshape`` のように、一般的にメソッドは、自分自身（ここではオブジェクトx）と、
それに加えて引数（ここでは 4, 3）を受け取り、
何か戻り値（ここでは別のnp.ndarray型のオブジェクト y）を返す関数である。

本講座では、クラスをどのようにして定義するかなどは省略するが、
クラスはデータ（上の例ではxに格納されている値）と機能（ ``reshape`` などのメソッド）
をひとまとめにしたものであると理解できれば、外部パッケージの使用には十分である。
