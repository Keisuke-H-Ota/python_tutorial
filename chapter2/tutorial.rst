Python 入門
===================

本章では、Jupyter-notebookを使って、Pythonの文法を学ぶ。

--------------------------
Pythonの基本変数
--------------------------


C言語やFortranのようなコンパイラ言語と異なり、
変数（オブジェクト）を定義する際にその型を指定する必要がない。

.. ipython:: python

  x = 'Hello python!'
  y = 2
  x
  y

上記の場合 x は文字列（str）であり、yは整数（int）となる。
オブジェクトの型を知りたい場合は、

.. ipython:: python

  type(x)
  type(y)

を実行すれば良い。
なお、type() 関数は、引数のオブジェクト型を返す関数である。

Python の基本的な型には主に以下が挙げられる。

+ 整数, int
+ 浮動小数点実数, float
+ 文字列, str
+ リスト, list
+ タプル, tuple
+ 辞書（連想配列）, dict

Python はオブジェクト指向の言語であり、
実際には後ほど説明する Numpy などのパッケージに含まれる上記とは別の型（オブジェクト）
を多用することになるが、
まずは上記の基本型を学ぶ


整数・浮動小数点
--------------------------

他のプログラム言語と同様、整数や浮動小数点といった型をサポートしており、
四則演算や階乗等は一般的な書き方で計算できる。

.. ipython:: python

  1 + 3
  3.0 ** 2.0  # ** は階乗を表す。


文字列
--------------------------

文字列を格納するオブジェクトである。
シングルコーテーションもしくはダブルコーテーションで囲うことで文字列となる。
なお、３連のシングルコーテーションで囲うと、改行を含めた文字列として扱うことができる。
各要素にアクセスするためには、 [] 演算子を利用する。
このようなアクセスの方法を Indexing （インデクシング）と呼ぶ。

.. ipython:: python

  x = 'Hello python!'
  x[0]
  x[2]
  x[-1]


Python の インデクシングの特徴は

+ 一番最初の要素は 0 番目として数えられる（C言語と同様。Fortranと異なる）。

+ 負のインデクスを指定することで、末尾から数えることもできる。
  例えば、インデクスとして -1 を指定すると、末尾の要素、-2 を指定すると 末尾から2つ目の要素にアクセスできる。

さらに、同時に複数の要素にアクセスする（Slicing）スライシングも可能である。

.. ipython:: python

  x[1:4]

  x[:5]

  x[-3:]


1:4 という表記は、1~3番目の要素を示し、元のオブジェクトの部分要素が選択される。
片方を省略した :5 などは、0:5 と同値である。

ここで x は文字列(str)であるが、文字列は以下のように + 記号で結合できる。

.. ipython:: python

  x2 = x + ' I love you !'
  x2


リスト
--------------------------

複数のオブジェクトを格納するオブジェクトである。
リストオブジェクトを作成するためには、[]内に複数の要素をコンマ区切りで記述すればよい。
なお、それぞれのオブジェクトは型が異なってもよい。

.. ipython:: python

  z_list = [x, 3.0, x2]
  z_list

文字列の場合と同様に、インデクシングやスライシングに対応している。

.. ipython:: python

  z_list[-1]

リストの末尾に新しいオブジェクトを追加するためには .append を用いる。

.. ipython:: python

  z_list.append(5.0)
  z_list

また、要素数は len 関数により知ることができる。


.. ipython:: python

  len(z_list)


タプル
--------------------------

タプルはリストと似ているが、要素数が後から変更できないという点でリストと異なる。
タプルオブジェクトを作成するには、()内に複数の要素を記述するか、
あるいは単純にコンマ区切りで記述する。

.. ipython:: python

  t = (1, 3.0, x)

  t

  a, b = 2.0, 3.0  # (a, b) に (2.0, 3.0) を代入していることに相当する。

  a, b

辞書
--------------------------

辞書は連想配列とも呼ばれ、
リストと同様に複数の要素を格納できるオブジェクトであるが、
引数（キーと呼ぶ）に任意の（より厳密には、ハッシュ可能な）オブジェクトを用いることができる。
一般的には以下のように、文字列をキーにする場合が多い。

.. ipython:: python

  d = {'a': 1.0, 'b': 3.0}

  d['a']

  d['c'] = 5.0  # 新しい要素を追加するには、単に新しいキーを指定して値を代入する。

  d

上記のように、{} 内に、キーと要素を:で対応させて記述する。


--------------------------
Pythonの基本文法
--------------------------

この節では、Python の主な文法を簡単に述べる。
C言語やFortran などでは例えば if 文の及ぶ範囲を{} や IF - END IF で囲って表記するが、
Pythonではそれらをインデントで表す。
Pythonの標準的な記法ではインデントは4つのスペースを用いる。

if 文
--------------------------

if 文は以下のように、if [条件] : (コロン) と書き、条件が真の場合に実行する内容を
次の行から新たなインデントを用いて記述する。

.. code-block:: python

  if a < b:
      print(a)


while ループ
------------

while ループも同様に、繰り返し実行する内容をインデントにより区別して記述する。

.. code-block:: python

  while a < b:
      a += 1
      print(a)


for ループ
------------

Python の for ループは、C言語や Fortran の do ループより少し一般的である。
C言語や Fortran では整数を1ずつ増やしながら実行することが多いが、
Python では リスト（やタプル）を1つずつ変更しながら繰り返すことになる。

.. ipython:: python

  for z in z_list:
      print(z)

上記は、z_list の各要素を1つずつzに代入し、
それをz_listの最初の要素から最後の要素まで繰り返す、
という意味である。

C言語やFortranのforループと同様の操作は、
0から指定した値までの整数を順に並べたオブジェクトを返す range 関数を用いることで実現できる。

.. ipython:: python

  for i in range(len(z_list)):
      print(z_list[i])


内包表記
--------------------------

ソースコードは一般的に短いほど可読性が上がる。
Pythonには内包表記と呼ばれる記述方法がある。これは、ループを簡略的に記述するものである。

.. ipython:: python

  x_list = [1.0, 2.0, 4.0]
  y_list = [x**2 for x in x_list]
  y_list

上記の例の2行目は、
x_list から 1つ要素を取ってきて x に代入し、
それぞれの二乗の値を要素にもつリストをy_list に代入する、という意味であり、
以下を一行で記述したものに相当する。

.. ipython:: python

  y_list = []
  for x in x_list:
    y_list.append(x**2)
